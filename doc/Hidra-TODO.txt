Hidra-TODO.txt

Adotar LaTeX para escrita do trabalho

Derivar Requisitos Funcionais para Biblioteca Hidra a partir dos Requisitos Arquiteturais
	- Quadro 5.19 da Seção 5.3.1 - Dissertação Márcio Osshiro: Cambuci
	- Quadro 5.20 da Seção 5.3.2 - Dissertação Márcio Osshiro: Cambuci


Classe Java para manipulação de XML (considerar a possibilidade de usar JSON)

Padrão RAS para armazenamento de Ativos Reusáveis de Software
	capítulo 5.1.1 da Dissertação do Henrique Rocha
	conferir especificações do RAS:
		http://www.omg.org/cgi-bin/doc?ptc/2004-06-06
		http://www.omg.org/spec/RAS/2.2/ (**considerar este aqui**)

Sobre o mecanismo de armazenamento:
	Segunda abordagem para armazenamento: descompactado
	implementar classes mínimas de compatibilidade com RAS (pg. 151)

Implementar classe para manipulação de arquivos de configuração
	A classe properties pode facilitar isso: https://docs.oracle.com/javase/7/docs/api/java/util/Properties.html

Implementar classe para log

Consultar https://git-scm.com/book/pt-br/v1/Git-no-Servidor-Configurando-Git-no-Servidor
	para referência sobre instalação e configuração de um repositório git em um servidor.


EM RESUMO:

Escopo:
	Implementação
		hidra.Asset: Classe que representa a Estrutura Lógica de Dados RAS
			se necessário mais de uma classe, adotar o seguinte padrão:
			hidra.assets.Profile
		
		hidra.AssetConfig: Classe responsável pela Gerência de Configuração do Ativo: versionar estrutura de diretório do Ativo (usar jGit)
			métodos para Salvar, Atualizar, Restaurar (etc.)
		
		hidra.Repository: Classe responsável por manipular o repositório
			métodos para Criar repositório, clonar repositório, exportar conteúdo completo do repositório, excluir repositório
			
		hidra.ws.Asset: Classe que abstrai os métodos das classes Asset e AssetConfig em webservices (REST)
		hidra.ws.Repository: Classe que abstrai os métodos da classe Repository em webservices (REST)
	Texto:
		Abstract
		Indrodução
		Embasamento Teórico e Trabalhos Relacionados
		Ferramentas e Tecnologias
			jGit
			WebServices (explicitar o que foi usado)
		Hidra
			Requisitos Funcionais
			Padrão RAS
			Funcionalidades Implementadas
		Conclusão e Trabalhos Futuros
		REFERÊNCIAS
CRONOGRAMA

28/05 - Reunão de definição final (fechamento do escopo)
31/05 - Seção Hidra v1
		Derivação dos requisitos da biblioteca Hidra a partir dos requisios arquiteturais da Cambuci
07/06 - [entrega de implementação] hidra.Asset
07/06 - Seção Hidra v2
	Requisitos Funcionais + Padrão RAS + Funcionalidades implementadas (inicial)
14/06 - [entrega de implementação] hidra.AssetConfig
14/06 - Ferramentas e Tecnologias
14/06 - Embasamento Teórico (Geraldo)
21/06 - [entrega de implementação] hidra.Repository
21/06 - introdução, conclusão(e trabalhos futuros) e abstract + Seção Hidra v3 (completa)
21/06 - Entrega da versão final do texto
23/06 - Entrega da versão final do texto corrigida
28/06 - [entrega de implementação] hidra.ws.Asset, hidra.ws.Repository
30/06 - Banca
